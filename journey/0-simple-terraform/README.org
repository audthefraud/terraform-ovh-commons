#+TITLE: A journey with Terraform on OVH Cloud (part 1)
#+AUTHOR: yann degat
#+EMAIL: yann.degat@corp.ovh.com

* Objective

This document is the first part of an 8 parts journey that will provide you 
a step by step guide on how to use the [[https://terraform.io][Hashicorp Terraform]] tool with [[https://www.ovh.com/fr/public-cloud/instances/][OVH Cloud]]. 
It will guide you through a very simple terraform script that creates an object
storage swift container to a full multi region HA setup using terraform modules 
provided by OVH.

In the end, it can help you better understand complex terraform modules such as the [[https://registry.terraform.io/modules/ovh/publiccloud-consul/ovh/0.1.3][Consul]]
or the [[https://registry.terraform.io/modules/ovh/publiccloud-k8s/ovh][Kubernetes]] modules and thus serve as an introduction to those modules.

It will also covers the very basic features of the [[https://www.terraform.io/downloads.html][terraform]] tool, such as terraform 
scripts, managing state, modules, ...

According to your level of knowledge of our platform and the [[https://www.terraform.io/downloads.html][terraform]] tool, feel
free to skip the first steps.


* Pre requisites [9/9]

Please make sure before going any further that all the following pre requisites are met 
on your side:
,
- [X] register an ovh account
- [X] order a public cloud project
- [X] create an openstack user
- [X] download openrc in keystone v3 format
- [X] install the [[https://www.terraform.io/downloads.html][terraform binary]] (version >= 0.10.3) according to your OS 
- [X] install the openstack cli on your target host (~pip install python-openstackclient~) 
  (optional but very useful as we'll see in the examples)
- [X] order a vrack (starting step 6)
- [X] attach your vrack to your openstack project (starting step 6)
- [X] get an [[OVHAPIKey][ovh api consumer key]] (required for the multiregion setup on step 8)


* In pratice: Terraform basics: a very first step 

The first 3 steps of the journey are pure [[https://www.terraform.io/downloads.html][terraform]] basic reminders.
This step will help you create an openstack swift container on the region of your choice.

First, if it hasn't already been done, download the terraform binany for your platform of choice:

  #+BEGIN_SRC bash :session *journey* :results output none  :eval never-export
  curl -fLs -o /tmp/terraform.zip https://releases.hashicorp.com/terraform/0.11.3/terraform_0.11.3_linux_amd64.zip
  (cd /tmp && unzip terraform.zip)
  sudo mv /tmp/terraform /usr/local/bin
  sudo chmod +x /usr/local/bin/terraform
  rm /tmp/terraform.zip
  #+END_SRC

This last step is mandatory for the rest of the journey and we'll assume from there it has been done as mentioned 
in the pre requisites.

Now you can ~cd~ in the first step directory and have a look at the directory structure.

  #+BEGIN_SRC bash :session *journey* :results output pp  :eval never-export
  cd 0-simple-terraform
  find .
  #+END_SRC

  #+BEGIN_EXAMPLE bash 
  .
  ./main.tf
  #+END_EXAMPLE  

You should see a directory with a single ~main.tf~ file.

A "tf" file is a script that terraform will take as input to apply 
the configuration you have described in it. Let's see how it looks:

  #+CAPTIOnN: main.tf
  #+BEGIN_SRC terraform  :eval never-export
  resource "openstack_objectstorage_container_v1" "backend" {
    region         = "SBG3"
    name           = "demo-simple-terraform" 
  }
  #+END_SRC

The script describes a single resource of type ~openstack\_objectstorage\_container\_v1~
with the id ~backend~. It has 2 attributes: a name and a region.

We will apply this script in a few minutes but first, lets look at what Openstack
Swift containers we already have on the ~SBG3~ region.

  #+BEGIN_SRC bash :session *journey* :results output pp  :eval never-export
  source ~/openrc.sh
  openstack --os-region-name SBG3 container list
  #+END_SRC


Result is empty. Good. If it's not then you should see your existing containers listed.

Notice the ~source~ command above which will load your Openstack credentials in your shell environment.
This line will be headed in all the following code snippets as a reminder. You may want to make it point
to your openrc.sh file path.

We can apply our configuration

  #+BEGIN_SRC bash :session *journey* :results output pp  :eval never-export
  source ~/openrc.sh
  terraform apply
  #+END_SRC

  #+BEGIN_EXAMPLE bash
  ...
  Terraform will perform the following actions:
  
    + openstack_objectstorage_container_v1.backend
        id:     <computed>
        name:   "demo-simple-terraform"
        region: "SBG3"
  
  
  Plan: 1 to add, 0 to change, 0 to destroy.
  
  Do you want to perform these actions?
  ...
  #+END_EXAMPLE  

Great! Terraform wants to create a new resource of type "openstact_objectstorage_container_v1".
Let's do it by typing "yes".
  
  #+BEGIN_EXAMPLE bash

    Enter a value: yes

  openstack_objectstorage_container_v1.backend: Creating...
    name:   "" => "demo-simple-terraform"
    region: "" => "SBG3"
  openstack_objectstorage_container_v1.backend: Creation complete after 1s (ID: demo-simple-terraform)

  Apply complete! Resources: 1 added, 0 changed, 0 destroyed.
  #+END_EXAMPLE  
 
Great, the container seems to have been created. Let's check this by listing our containers again:

  #+BEGIN_SRC bash :session *journey* :results output pp  :eval never-export
  source ~/openrc.sh
  openstack --os-region-name SBG3 container list
  #+END_SRC

  #+BEGIN_EXAMPLE bash
  +-----------------------+
  | Name                  |
  +-----------------------+
  | demo-simple-terraform |
  +-----------------------+
  #+END_EXAMPLE  
 

Now that we have seen how to create a resource with terraform, let's see how to destroy it.
Actually, it's pretty simple and straight forward:

  #+BEGIN_SRC bash :session *journey* :results output pp  :eval never-export
  source ~/openrc.sh
  terraform destroy
  #+END_SRC

  #+BEGIN_EXAMPLE bash
  ...
  Terraform will perform the following actions:

    - openstack_objectstorage_container_v1.backend


  Plan: 0 to add, 0 to change, 1 to destroy.

  Do you really want to destroy?
  ...
  #+END_EXAMPLE  

It seems to be correct. Let's type 'yes' and see what happens.


  #+BEGIN_SRC bash :session *journey* :results output pp  :eval never-export
  Do you really want to destroy?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes
  #+END_SRC

  #+BEGIN_EXAMPLE bash

openstack_objectstorage_container_v1.backend: Destroying... (ID: demo-simple-terraform)
openstack_objectstorage_container_v1.backend: Destruction complete after 1s

Destroy complete! Resources: 1 destroyed.
  #+END_EXAMPLE  

Now let's check our containers again:

  #+BEGIN_SRC bash :session *journey* :results output pp  :eval never-export
  source ~/openrc.sh
  openstack --os-region-name SBG3 container list
  #+END_SRC


Result is empty, as expected. And that's it!

OH! One more thing! Have you noticed the ~terraform.tfstate*~ files in your directory?
Well, we shall talk about these in the next chapter.


* Going Further

You can now jump to the [[../1-simple-terraform-vars/README.md][second step]] of our journey introducing vars and outputs.


Of course, if you want to deep dive into terraform, you can also read the official
[[https://www.terraform.io/guides/index.html][guides]] & [[https://www.terraform.io/docs/index.html][docs]].
 

* <<OVHAPIKey>> Get an OVH API Consumer key

To be able to make API calls against the OVH API, you have to get credentials.
To do so, you have to go through the following steps

- Register an app on ovh api
  You first have to create an app on the following [[https://eu.api.ovh.com/createApp/][page]].
- Then you can, after having replaced ~myapplicationkey~ by your actual key, generate a consumer key by running the following command:
  #+BEGIN_SRC bash :session *journey* :results output replace pp  :eval never-export
  curl -XPOST -H"X-Ovh-Application: myapplicationkey" -H "Content-type: application/json" \
  https://eu.api.ovh.com/1.0/auth/credential  -d '{
    "accessRules": [
        { "method": "GET", "path": "/*" },
        { "method": "PUT", "path": "/*" },
        { "method": "POST", "path": "/*" },
        { "method": "DELETE", "path": "/*" }
    ]
  }'
  #+END_SRC

  #+BEGIN_EXAMPLE javascript
  {"validationUrl":"https://eu.api.ovh.com/auth/?credentialToken=xxxyyyyzzzz","consumerKey":"myconsumerkey","state":"pendingValidation"}
  #+END_EXAMPLE

- The last command will output a JSON document containing your consumer key and a url you have to visit to activate the consumer key.
- Once you have validated your consumer key, you can edit an ~~/ovhrc~ file and fill it by replacing the according values:
  #+BEGIN_SRC bash :session *journey* :results output replace pp  :eval never-export
  export OVH_ENDPOINT="ovh-eu"
  export OVH_APPLICATION_KEY="myapplicationkey"
  export OVH_APPLICATION_SECRET="myapplicationsecret"
  export OVH_CONSUMER_KEY="myconsumerkey"
  #+END_SRC
