#+TITLE: A journey with Terraform on OVH Cloud (part 4)
#+AUTHOR: yann degat
#+EMAIL: yann.degat@corp.ovh.com

* Disclaimer

This [[file:unikernels.org][document]] is written in org mode within emacs, then exported in 
various format such as markdown or html.
As such, you may  copy/paste code snippets in a shell terminal.

But if you're editing this document within emacs, you can use it as a runnable notebook. 
You just have to hit ~C-c C-c~ on src blocks and code will be executed &
outputted within the document, along with a shell buffer named ~*journey*~.

Don't forget to load babel support for shell lang by hitting ~C-c C-c~ on the
following block:

#+BEGIN_SRC emacs-lisp :results output none :eval never-export
(org-babel-do-load-languages 'org-babel-load-languages '((shell . t)))
#+END_SRC

& then try it:

#+BEGIN_SRC bash :session *journey* :results output prepend pp :eval never-export
echo 'vi vi vi is the editor of the Beast!'
#+END_SRC

#+RESULTS:
: vi vi vi is the editor of the Beast!
: Go enter the Holy Church of Emacs!

_Tip_: you can hit ~Tab~ or ~Shift-Tab~ multiple times to collapse/uncollapse
paragraphs.


* Objective

This document is the fourth part of a [[../0-simple-terraform/README.md][step by step guide]] on how to use 
the [[https://terraform.io][Hashicorp Terraform]] tool with [[https://www.ovh.com/fr/public-cloud/instances/][OVH Cloud]]. It will help you create 
an openstack public instance on the region of your choice.


* Pre requisites

Please refer to the pre requisites paragraph of the [[../0-simple-terraform/README.md][first part]] of this guide.


* In pratice: OVH cloud: public instance

Here's how to boot a public instance on OVH public cloud using terraform:

Add this snippet in a ~.tf~ file:

#+BEGIN_SRC terraform :eval never-export :tangle main.tf
# define a remote state backend on swift
terraform {
  backend "swift" {
    container = "demo-public-instance"
  }
}

# configure your openstack provider to target the region of your choice
provider "openstack" {
  region = "${var.region}"
}

# Import Keypair by inlining your ssh public key using terraform interpolation 
# primitives (https://www.terraform.io/docs/configuration/interpolation.html)
resource "openstack_compute_keypair_v2" "keypair" {
  name       = "${var.name}"
  public_key = "${file("~/.ssh/id_rsa.pub")}"
}

# Create your Virtual Machine
resource "openstack_compute_instance_v2" "instance" {
  name        = "${var.name}"

  # Choose your base image from our catalog
  image_name  = "Centos 7"

  # Choose a flavor type
  flavor_name = "s1-8"

  # Target your brand new keypair
  key_pair    = "${openstack_compute_keypair_v2.keypair.name}"

  # Attach your VM to the public network
  network {
    name = "Ext-Net"
    access_network = true
  }
}
#+END_SRC

then run terraform:


#+BEGIN_SRC bash :session *journey* :results output pp  :eval never-export
source ~/openrc.sh
terraform init
terraform apply -auto-approve
#+END_SRC

#+BEGIN_EXAMPLE bash
Initializing the backend...

Successfully configured the backend "swift"! Terraform will automatically
use this backend unless the backend configuration changes.
...
openstack_compute_keypair_v2.keypair: Creating...
  name:       "" => "demo-public-instance"
  public_key: "" => "ssh-rsa ..."
  region:     "" => "<computed>"
openstack_compute_keypair_v2.keypair: Creation complete after 0s (ID: demo-public-instance)
openstack_compute_instance_v2.instance: Creating...
  access_ip_v4:             "" => "<computed>"
  access_ip_v6:             "" => "<computed>"
  all_metadata.%:           "" => "<computed>"
  availability_zone:        "" => "<computed>"
  flavor_id:                "" => "<computed>"
  flavor_name:              "" => "s1-8"
  force_delete:             "" => "false"
  image_id:                 "" => "<computed>"
  image_name:               "" => "Centos 7"
  key_pair:                 "" => "demo-public-instance"
  name:                     "" => "demo-public-instance"
  network.#:                "" => "1"
  network.0.access_network: "" => "true"
  network.0.fixed_ip_v4:    "" => "<computed>"
  network.0.fixed_ip_v6:    "" => "<computed>"
  network.0.floating_ip:    "" => "<computed>"
  network.0.mac:            "" => "<computed>"
  network.0.name:           "" => "Ext-Net"
  network.0.port:           "" => "<computed>"
  network.0.uuid:           "" => "<computed>"
  region:                   "" => "<computed>"
  security_groups.#:        "" => "<computed>"
  stop_before_destroy:      "" => "false"
openstack_compute_instance_v2.instance: Still creating... (10s elapsed)
openstack_compute_instance_v2.instance: Still creating... (20s elapsed)
openstack_compute_instance_v2.instance: Creation complete after 26s (ID: ...)

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.

Outputs:

helper = You can now connect to your instance:

 $ ssh centos@a.b.c.d
#+END_EXAMPLE  

How fun! You can now ssh into your centos box by pasting the output helper.

Don't forget to destroy your instance once done:
#+BEGIN_SRC bash :session *journey* :results output pp  :eval never-export
source ~/openrc.sh
terraform destroy -force
...
#+END_SRC

#+BEGIN_EXAMPLE bash
openstack_compute_keypair_v2.keypair: Refreshing state... (ID: demo-public-instance)
openstack_compute_instance_v2.instance: Refreshing state... (ID: da3be2fb-429f-427d-acc3-d5e9262ab460)
openstack_compute_instance_v2.instance: Destroying... (ID: da3be2fb-429f-427d-acc3-d5e9262ab460)
openstack_compute_instance_v2.instance: Still destroying... (ID: da3be2fb-429f-427d-acc3-d5e9262ab460, 10s elapsed)
openstack_compute_instance_v2.instance: Destruction complete after 10s
openstack_compute_keypair_v2.keypair: Destroying... (ID: demo-public-instance)
openstack_compute_keypair_v2.keypair: Destruction complete after 0s

Destroy complete! Resources: 2 destroyed.
#+END_EXAMPLE  


* Going Further

Next time we'll introduce more advanced features of our cloud, such as ports and security 
groups. 

See you on [[../4-advanced-public-instances/README.md][the fifth step]] of our journey.
